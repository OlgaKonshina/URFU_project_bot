import telebot
import whisper
import os
import requests
import subprocess
import pytz
import yaml
import logging


logging.basicConfig(
    level=logging.INFO,
    filename="logfile.log",
    filemode="w",
    encoding='utf-8',
    format="%(name)s %(asctime)s %(levelname)s %(message)s",
)


try:
    with open(r"src/TGBot_config.yaml", "r") as f:
        config = yaml.safe_load(f)
    logging.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
except Exception as e:
    logging.critical(
        f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –û—à–∏–±–∫–∞ {e}", exc_info=True
    )


try:
    token = config["token"]
    bot = telebot.TeleBot(token)
    p_timezone = pytz.timezone(config["timezone"])
    timezone_common_name = config["timezone_common_name"]
    logging.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except Exception as e:
    logging.critical(f"–ö–æ–Ω—Ñ–∏–≥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û—à–∏–±–∫–∞ {e}", exc_info=True)


@bot.message_handler(commands=["start"])
def start_message(message):
    try:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è ,  –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n"
            "Hi ‚úåÔ∏è, send me a voice/video message!",
        )
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except Exception as e:
        logging.error(
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—à–∏–±–∫–∞: {e}",
            exc_info=True
        )


@bot.message_handler(commands=["help"])
def help_message(message):

    try:
        bot.send_message(
            message.chat.id,
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç\n"
            "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö\n\n"
            "This bot translates voice/video messages into text\n"
            "The bot was created for educational purposes",
        )
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    except Exception as e:
        logging.error(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–Ω—Ñ–æ–æ–Ω–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. {e}",
            exc_info=True,
        )


@bot.message_handler(commands=["model"])
@bot.message_handler(commands=["lang"])
def help_message(message):
    try:
        bot.send_message(
            message.chat.id,
            "–ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –º–Ω–æ–≥–∏—Ö —è–∑—ã–∫–∞—Ö,\n–Ω–æ –ø–æ–∫–∞ –Ω–µ –Ω–∞ –≤—Å–µ—Ö\n–í—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫\nBot can understand many languages\nChoose languages.",
        )

        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.row(
            telebot.types.InlineKeyboardButton(
                "–†—É—Å—Å–∫–∏–π / Russian", callback_data="lang-rus"
            )
        )
        keyboard.row(
            telebot.types.InlineKeyboardButton(
                "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π / English", callback_data="lang-eng"
            )
        )
        keyboard.row(
            telebot.types.InlineKeyboardButton(
                "–•–∏–Ω–¥–∏ / Hindi", callback_data="lang-hin"
            )
        )
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose the language:",
            reply_markup=keyboard,
        )
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞")
    except Exception as e:
        logging.error(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—à–∏–±–∫–∞ {e}", exc_info=True
        )


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    try:
        if call.message:
            if call.data == "lang-rus":
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è",
                )
                logging.info("–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π")
            elif call.data == "lang-eng":
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="You've chose English message language",
                )
                logging.info("–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
            elif call.data == "lang-hin":
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‡§Ü‡§™‡§®‡•á ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•Ä ‡§π‡•à",
                )
                logging.info("–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: —Ö–∏–Ω–¥–∏")
            else:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π —è–∑—ã–∫",
                )
                logging.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)


@bot.message_handler(
    content_types=[
        "audio",
        "photo",
        "document",
        "text",
        "location",
        "contact",
        "sticker",
    ]
)
def exceptions(message):
    try:
        bot.send_message(
            message.from_user.id,
            "–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!üò≥\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /helpüò≥\n\n"
            "Nothing is clear, but it is very interesting!üò≥ \nTry the /help commandüò≥",
        )
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —á—Ç–æ-–ª–∏–±–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å")
    except Exception as e:
        logging.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)


@bot.message_handler(content_types=["voice", "video", "video_note"])
def get_media_messages(message):
    bot.send_message(message.from_user.id, "Started recognition...")
    try:
        bot.send_message(message.from_user.id, "Continue recognition...")
        logging.info("–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")

        if message.content_type == "voice":
            file_id = message.voice.file_id
            logging.info("–†–∞—Å–ø–æ–∑–Ω–∞—ë–º –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        elif message.content_type == "video_note":
            file_id = message.video_note.file_id
            logging.info("–†–∞—Å–ø–æ–∑–Ω–∞–µ–º –≤–∏–¥–µ–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        elif message.content_type == "video":
            file_id = message.video.file_id
            logging.info("–†–∞—Å–ø–æ–æ–∑–Ω–∞–µ–º –≤–∏–¥–µ–æ —Å–æ–æ–±—â–Ω–∏–µ")
        else:
            bot.send_message(message.from_user.id, "–¢–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —è –Ω–µ –∑–Ω–∞—éüò≥")
            logging.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç {message.content_type}"
            )
            return

        try:
            file_info = bot.get_file(file_id)
            path = file_info.file_path
            fname = os.path.basename(path)
            doc = requests.get(
                "https://api.telegram.org/file/bot{0}/{1}".format(
                    token, file_info.file_path
                )
            )
            with open(fname, "wb") as f:
                f.write(doc.content)
            logging.info("–§–∞–π–ª –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç")
        except Exception as e:
            logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª. –û—à–∏–±–∫–∞ {e}", exc_info=True)

        try:
            subprocess.run(["ffmpeg", "-i", fname, fname[:-4] + ".wav"], check=True)
            logging.info("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        except subprocess.CalledProcessError as e:
            bot.send_message(
                message.from_user.id, "c –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üò£"
            )
            os.remove(fname)
            logging.critical(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {e}", exc_info=True)
            return

        try:
            model = whisper.load_model("small")
            bot.send_message(message.from_user.id, "Model loaded")
            logging.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logging.critical(f"–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –û—à–∏–±–∫–∞: {e}", exc_info=True)

        try:
            result = model.transcribe(
                fname[:-4] + ".wav", fp16=False
            )  # —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º –∞—É–¥–∏–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ç–µ–∫—Å—Ç
            logging.info("–†–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∞—É–¥–∏–æ –∏ –ø–µ—Ä–µ–≤–µ–ª–∏ –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç")
        except Exception as e:
            bot.send_message(
                message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ c —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ–ºüò£"
            )
            os.remove(fname)
            os.remove(fname[:-4] + ".wav")
            logging.critical(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç. –û—à–∏–±–∫–∞: {e}", exc_info=True
            )
            return

        bot.send_message(message.from_user.id, "Finish recognition...")

        if result["text"] == "":
            bot.send_message(message.from_user.id, "–ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å üò£")
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—Ç—Ç—å —Ç–µ–∫—Å—Ç")
        else:
            bot.send_message(message.from_user.id, result["text"])
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ–≤ —Ç–µ–∫—Å—Ç")

    except Exception as e:
        bot.send_message(
            message.from_user.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –Ω–∞—à–∏ —Å–º–µ–ª—ã–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã —É–∂–µ —Ç—Ä—É–¥—è—Ç—Å—è –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º... üò£\n"
            "Something went wrong, but our brave engineers are already working on a solution... üò£",
        )
        logging.critical(f"–°–∫—Ä–∏–ø—Ç –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª. –û—à–∏–±–∫–∞ {e}", exc_info=True)

    finally:
        os.remove(fname)
        os.remove(fname[:-4] + ".wav")
        logging.info("–ó–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞")


bot.polling(none_stop=True, interval=0)
