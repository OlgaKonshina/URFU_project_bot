import telebot
import whisper
import os
import requests
import subprocess
import pytz
import yaml

with open(r'TGBot_config.yaml', 'r') as f:
    config = yaml.safe_load(f)

token = config['token']
bot = telebot.TeleBot(token)
p_timezone = pytz.timezone(config['timezone'])
timezone_common_name = config['timezone_common_name']


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è ,  –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!\nHi ‚úåÔ∏è, send me a voice message!')


@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, '–≠—Ç–æ—Ç –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç\n–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ —É—á–µ–±–Ω—ã—Ö '
                                      '—Ü–µ–ª—è—Ö\n\nThis bot translates voice messages into text\nThe bot was created for'
                                      ' educational purposes.')


@bot.message_handler(
    content_types=['audio', 'photo', 'video', 'document', 'text', 'location', 'contact', 'sticker'])
def exceptions(message):
    bot.send_message(message.from_user.id,
                     "–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!üò≥\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help\n\nNothing is clear, "
                     "but it is very interesting!üò≥ \nTry the /help commandüò≥")


@bot.message_handler(content_types=['voice', 'video_note'])
def get_media_messages(message):
    bot.send_message(message.from_user.id, "Started recognition...")
    try:
        bot.send_message(message.from_user.id, "Continue recognition...")
        file_id = message.voice.file_id if message.content_type == 'voice' else message.video_note.file_id
        file_info = bot.get_file(file_id)
        path = file_info.file_path
        fname = os.path.basename(path)
        doc = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(token, file_info.file_path))
        with open(fname, 'wb') as f:
            f.write(doc.content)

        try:
            subprocess.run(['ffmpeg', '-i', fname, fname[:-4] + '.wav'], check=True)
        except subprocess.CalledProcessError as e:
            bot.send_message(message.from_user.id,
                             "c –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üò£")
            os.remove(fname)
            return

        model = whisper.load_model('small')
        bot.send_message(message.from_user.id, 'Model loaded')

        try:
            result = model.transcribe(fname[:-4] + '.wav', fp16=False)  # —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º –∞—É–¥–∏–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ç–µ–∫—Å—Ç
        except Exception as e:
           bot.send_message(message.from_user.id,"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ c —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ–ºüò£")
           os.remove(fname)
           os.remove(fname[:-4] + '.wav')
           return

        bot.send_message(message.from_user.id, "Finish recognition...")

        if result['text'] == '':
            bot.send_message(message.from_user.id,"–ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å üò£")
        else:
            bot.send_message(message.from_user.id, result['text'])

    except Exception as e:
        bot.send_message(message.from_user.id,
                         "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –Ω–∞—à–∏ —Å–º–µ–ª—ã–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã —É–∂–µ —Ç—Ä—É–¥—è—Ç—Å—è –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º... üò£  \nySomething went wrong, but our brave engineers are already working on a solution... üò£")
    finally:
        os.remove(fname)
        os.remove(fname[:-4] + '.wav')


bot.polling(none_stop=True, interval=0)