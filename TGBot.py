import telebot
import whisper
import os
import requests
import subprocess
import pytz
import yaml

with open(r'TGBot_config.yaml', 'r') as f:
    config = yaml.safe_load(f)

token = config['token']
bot = telebot.TeleBot(token)
p_timezone = pytz.timezone(config['timezone'])
timezone_common_name = config['timezone_common_name']


@bot.message_handler(commands=['start'])
def start_message(message):

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è ,  –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n'
                                      'Hi ‚úåÔ∏è, send me a voice/video message!')
#–¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
users = {}
administrators = (1088564774,)

#—Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@bot.message_handler(commands=['feedback'])
def feedback_message(message):
    chat_id = message.chat.id
    keyboard = telebot.types.ReplyKeyboardMarkup()
    button_save = telebot.types.InlineKeyboardButton(
        text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
    keyboard.add(button_save)
    bot.send_message(chat_id,
                     '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é',
                     reply_markup=keyboard)
    with open('feedback.jpg', 'rb') as file:
        photo = file.read()
    bot.send_photo(chat_id, photo)

#–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–∫—Å—Ç–æ–º
@bot.message_handler(
    func=lambda message: message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
def write_to_support(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è')
    users[chat_id] = {}
    bot.register_next_step_handler(message, save_username)

#—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
def save_username(message):
    chat_id = message.chat.id
    name = message.text
    users[chat_id]['name'] = name
    bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ, {name}. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é')
    bot.register_next_step_handler(message, save_surname)

#—Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_surname(message):
    chat_id = message.chat.id
    surname = message.text
    users[chat_id]['surname'] = surname
    keyboard = telebot.types.InlineKeyboardMarkup()
    button_save = telebot.types.InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                                                     callback_data='save_data')
    button_change = telebot.types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å",
                                                       callback_data='change_data')
    keyboard.add(button_save, button_change)

    bot.send_message(chat_id, f'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?', reply_markup=keyboard)

#—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['who_i'])
def who_i(message):
    chat_id = message.chat.id
    name = users[chat_id]['name']
    surname = users[chat_id]['surname']
    bot.send_message(chat_id, f'–í—ã: {name} {surname}')

#—Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data == 'save_data')
def save_btn(call):
    message = call.message
    chat_id = message.chat.id
    message_id = message.message_id
    bot.answer_callback_query(call.id, text="–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    bot.delete_message(chat_id=chat_id, message_id=message_id)
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: ')
    bot.register_next_step_handler(message, send_feedback_administrators)

#—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
def send_feedback_administrators(message):
    feedback = message.text
    user = users[message.chat.id]
    name = user['name']
    surname = user['surname']
    for admin_chat_id in administrators:
        bot.send_message(admin_chat_id,
                         f'{surname} {name} –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤: {feedback}')


@bot.callback_query_handler(func=lambda call: call.data == 'change_data')
def save_btn(call):
    message = call.message
    chat_id = message.chat.id
    message_id = message.message_id
    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                          text='–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö!')
    write_to_support(message)


@bot.message_handler(commands=['help'])
def help_message(message):

    bot.send_message(message.chat.id, '–≠—Ç–æ—Ç –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç\n'
                                      '–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö\n\n'
                                      'This bot translates voice/video messages into text\n'
                                      'The bot was created for educational purposes')


@bot.message_handler(commands=['model'])


@bot.message_handler(commands=['lang'])
def help_message(message):
    bot.send_message(message.chat.id, '–ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –º–Ω–æ–≥–∏—Ö —è–∑—ã–∫–∞—Ö,\n–Ω–æ –ø–æ–∫–∞ –Ω–µ –Ω–∞ –≤—Å–µ—Ö\n–í—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫\nBot can understand many languages\nChoose languages.')

    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(
        telebot.types.InlineKeyboardButton('–†—É—Å—Å–∫–∏–π / Russian', callback_data='lang-rus')
    )
    keyboard.row(
        telebot.types.InlineKeyboardButton('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π / English', callback_data='lang-eng')
    )
    keyboard.row(
        telebot.types.InlineKeyboardButton('–•–∏–Ω–¥–∏ / Hindi', callback_data='lang-hin')
    )
    bot.send_message(
        message.chat.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose the language:',
        reply_markup=keyboard
    )



@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    if call.message:
        if call.data == "lang-rus":
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è")
        elif call.data == "lang-eng":
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="You've chose English message language")
        elif call.data == "lang-hin":
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‡§Ü‡§™‡§®‡•á ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•Ä ‡§π‡•à")
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π —è–∑—ã–∫")

@bot.message_handler(

    content_types=['audio', 'photo', 'document', 'text', 'location', 'contact', 'sticker'])
def exceptions(message):
    bot.send_message(message.from_user.id,
                     "–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!üò≥\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /helpüò≥\n\n"
                     "Nothing is clear, but it is very interesting!üò≥ \nTry the /help commandüò≥")


@bot.message_handler(content_types=['voice', 'video', 'video_note'])


def get_media_messages(message):
    bot.send_message(message.from_user.id, "Started recognition...")
    try:
        bot.send_message(message.from_user.id, "Continue recognition...")

        if message.content_type == 'voice':
            file_id = message.voice.file_id
        elif message.content_type == 'video_note':
            file_id = message.video_note.file_id
        elif message.content_type == 'video':
            file_id = message.video.file_id
        else:
            bot.send_message(message.from_user.id, '–¢–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —è –Ω–µ –∑–Ω–∞—éüò≥')
            return


        file_info = bot.get_file(file_id)
        path = file_info.file_path
        fname = os.path.basename(path)
        doc = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(token, file_info.file_path))
        with open(fname, 'wb') as f:
            f.write(doc.content)


        try:
            subprocess.run(['ffmpeg', '-i', fname, fname[:-4] + '.wav'], check=True)
        except subprocess.CalledProcessError as e:
            bot.send_message(message.from_user.id,
                             "c –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üò£")
            os.remove(fname)
            return


        model = whisper.load_model('small')
        bot.send_message(message.from_user.id, 'Model loaded')

        try:
            result = model.transcribe(fname[:-4] + '.wav', fp16=False)  # —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º –∞—É–¥–∏–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ç–µ–∫—Å—Ç
        except Exception as e:
           bot.send_message(message.from_user.id,"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ c —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ–ºüò£")
           os.remove(fname)
           os.remove(fname[:-4] + '.wav')
           return

        bot.send_message(message.from_user.id, "Finish recognition...")

        if result['text'] == '':
            bot.send_message(message.from_user.id,"–ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å üò£")
        else:
            bot.send_message(message.from_user.id, result['text'])

    except Exception as e:
        bot.send_message(message.from_user.id,
                         "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –Ω–∞—à–∏ —Å–º–µ–ª—ã–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã —É–∂–µ —Ç—Ä—É–¥—è—Ç—Å—è –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º... üò£  \n"
                         "Something went wrong, but our brave engineers are already working on a solution... üò£")

    finally:
        os.remove(fname)
        os.remove(fname[:-4] + '.wav')


bot.polling(none_stop=True, interval=0)
